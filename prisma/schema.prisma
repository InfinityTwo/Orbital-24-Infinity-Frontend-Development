// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Topic {
  id            Int         @id @default(autoincrement()) @map(name: "topicid")
  title         String
  maxQuestions  Int         @default(0) // max number of questions, used to keep track when generating additional qns
  files         File[]
  questions     Question[] 
  user          User        @relation(fields: [userID], references: [id])
  userID        Int
  lastModified  DateTime    @default(now())
  isGenerating  Boolean     @default(false)
  data          String      // the training data of min 250 characters
}

model User {
  id            Int       @id @default(autoincrement()) @map(name: "userid")
  email         String    @unique
  lastLogin     DateTime  @default(now())
  authKey       String
  authValidity  DateTime  @default(now())
  posts         Topic[]
}

model File {
  id        Int         @id @default(autoincrement()) @map(name: "fileid")
  name      String
  data      String      @default("")
  topicID   Int         
  topic     Topic       @relation(fields: [topicID], references: [id])
}

model Question {
  id        Int                 @id @default(autoincrement()) @map(name: "questionid")
  question  String
  mrq       Boolean             @default(false)
  openEnded Boolean             @default(false)
  marked    Boolean             @default(false)
  selected  Int                 @default(-1)
  options   QuestionOptions[]
  topicID   Int                 
  topic     Topic               @relation(fields: [topicID], references: [id])
  refData   String              @default("") // to be used for notes reference after answered, stores section used to generate question
}

model QuestionOptions {
  id          Int         @id @default(autoincrement()) @map(name: "questionoptionid")
  option      String
  correct     Boolean
  questionID  Int         
  question    Question    @relation(fields: [questionID], references: [id])
}